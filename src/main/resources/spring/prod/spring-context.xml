<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

   <context:component-scan base-package="core.repository.impl.jpa"/>
   
   <context:component-scan base-package="core.service"/>

   <context:component-scan base-package="core.event"/>

    <context:property-placeholder location="classpath:/properties/application.properties"/>
    <!--<context:property-placeholder location="classpath:/properties/hibernate.properties"/>-->
    <!--<context:property-placeholder
        location="classpath:/properties/application.properties,
          classpath:/properties/hibernate.properties"
        ignore-unresolvable="true"/>-->

    <mvc:annotation-driven />

   <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
          <property name="username" value="${dataSource.username}"/>
          <property name="password" value="${dataSource.password}"/>
          <property name="url" value="${dataSource.url}"/>
          <property name="driverClassName" value="${dataSource.driverClassName}"/>
          <property name="validationQuery" value="${dataSource.validationQuery}"/>
   </bean>

   <!--<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
          <property name="dataSource" ref="dataSource"/>
          <property name="jpaVendorAdapter">
                 &lt;!&ndash; Use Hibernate as JPA impl &ndash;&gt;
                 <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
          </property>

          <property name="jpaProperties">
                 <map>
                        &lt;!&ndash; Specifies the properties for JPA how to generate the db &ndash;&gt;
                       &lt;!&ndash; <entry key="hibernate.hbm2ddl.auto" value="create"/> &ndash;&gt;&lt;!&ndash; Created and Dropped along with SessionFactory Create and Close&ndash;&gt;
                        &lt;!&ndash; Show SQL &ndash;&gt;
                        <entry key="hibernate.show_sql" value="true"/>
                 </map>
          </property>
          &lt;!&ndash; Specifies the directory where the entities are located &ndash;&gt;
          <property name="packagesToScan" value="core.entity"/>
   </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"/>-->
    <!-- Hibernate -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="core.entity"/>
        <property name="namingStrategy" ref="namingStrategy"/>

        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.order_inserts">true</prop>
                <prop key="hibernate.order_updates">true</prop>
                <prop key="hibernate.jdbc.batch_size">2</prop>

                <prop key="hibernate.validator.apply_to_ddl">false</prop>
                <prop key="hibernate.validator.autoregister_listeners">false</prop>

                <prop key="javax.persistence.validation.mode">none</prop>

                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
                <prop key="hibernate.generate.statistics">${hibernate.generate.statistics}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>

                <prop key="connection.pool_size">5</prop>
            </props>
        </property>
    </bean>

    <bean id="namingStrategy" class="org.hibernate.cfg.ImprovedNamingStrategy"/>

    <!-- Enables the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven/>  <!--looks for @Transactional on beans in the same application context they are defined in. This means that, if you put annotation driven configuration in a WebApplicationContext for a DispatcherServlet, it only checks for @Transactional beans in your controllers, and not your services. See Section 17.2, “The DispatcherServlet” for more information.-->


    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

   <!-- Authentication -->
    <!--<bean id="accountDetailsService" class="core.service.security.UserDetailsServiceImpl"/>-->
    <!-- Password encoding -->
    <bean id="bcryptEncoder" name="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- Email - emailSender -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.sender.host}" />
        <property name="port" value="${mail.sender.port}"/>
        <property name="username" value="${mail.sender.username}"/><!--https://www.google.com/settings/u/2/security/lesssecureapps-->
        <property name="password" value="${mail.sender.password}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>

<!--    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>properties.properties</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>-->
    <bean id = "messageSource"
          class= "org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:/properties/messages"/>
        <property name="cacheSeconds" value="5"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>



    <!-- AuthenticationFailureHandler  -->
    <bean id="formFailutreHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"/>
    <bean id="formSuccessHandler" class="web.authentication.form.FormSuccessHandler"/>

    <bean id="webAuthenticationEntryPoint" class="web.authentication.WebAuthenticationEntryPoint"/>

    <!-- OLD - authentication handler-->
    <bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">

            <property name="exceptionMappings">
                <props>
                    <prop key="org.springframework.security.authentication.BadCredentialsException">/login?errorAuthentication=badCredentials</prop>
                    <prop key="org.springframework.security.authentication.CredentialsExpiredException">/login?errorAuthentication=credentialsExpired</prop>
                    <prop key="org.springframework.security.authentication.AccountExpiredException">/login?errorAuthentication=accountExpired</prop>
                    <prop key="org.springframework.security.authentication.LockedException">/login?errorAuthentication=accountLocked</prop>
                    <prop key="org.springframework.security.authentication.DisabledException">/login?errorAuthentication=accountDisabled</prop> <!-- Disactivated -->
                </props>

            </property>
    </bean>

    <mvc:resources mapping="/resources/**" location="/resources/theme-def/" cache-period="31556926"/>
    
</beans>